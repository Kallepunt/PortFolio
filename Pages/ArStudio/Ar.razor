<PageTitle>Augmented Reality</PageTitle>
@page "/Ar"
@inject IJSRuntime jsRunTime



<div class="main">

	<div class="container">
		<div class="row">
			<div class="col-md-6 col-sm-12">
				<model-viewer style="border: 1px solid black; border-radius: 20px;"
							  alt="A 3d model provided from an url to an image"
							  src="@glbModelData"
							  shadow-intensity="1"
							  ar ar-placement="wall"
							  camera-controls touch-action="pan-y"></model-viewer>
			</div>
			<div class="col-md-6 col-sm-12">
				<h2 class="text-black">Create your unique painting and try it in AR</h2>

				<p class="text-black">Description: provide an url to an image of you choice.
					
				</p>
				<p class="text-muted">(Why not try my face with this Url "assets/images/me.jpg")</p>

				<p class="text-black">@Price</p>


				<div class="form-group text-black">
					<label for="sizeSelect">Url to your image:</label>
					<input type="text" class="form-control text-black" id="sizeSelect" style="color: black; border: 1px solid black; font-size: 16px;" @onchange="(x) => OnUrlChange(x)" value="@UrlToImage">





					<label for="sizeSelect">Select Size:</label>
					<select @onchange="(x) => OnSizeChange(x)" class=" form-control text-black" id="sizeSelect" style="color: black; border: 1px solid black; font-size: 16px;">
						<option value="Small">Small (30x50) - $50.00</option>
						<option value="Medium">Medium (50x80") - $75.00</option>
						<option value="LandScape" selected>Landscape (80x50) - $100.00</option>
					</select>


				</div>

				<button class="btn btn-primary" id="addToCartBtn">Add to Cart</button>
			</div>
		</div>
	</div>
</div>




@* <script>
	
	const addToCartBtn = document.getElementById('addToCartBtn');

	addToCartBtn.addEventListener('click', () => {
		const selectedSize = sizeSelect.value;
		// You can add code here to handle adding the selected size to the cart or perform any other actions.
		alert(`Added your painting to cart.`);
	});
</script> *@





@code {
	string UrlToImage = "https://as2.ftcdn.net/v2/jpg/02/55/17/43/1000_F_255174366_ojDuATz84e5h7lIlxh2moUJa9Kpd5wKk.jpg";
	string Price = "Price: $50.00";

	int PaintingX = 80;
	int PaintingY = 50;

	private string glbModelData;

	private async Task OnUrlChange(ChangeEventArgs args)
	{
		if (!string.IsNullOrEmpty(args.Value?.ToString()))
		{
			UrlToImage = args.Value.ToString();
			await ExportModel();
		}
	}

	private async Task OnSizeChange(ChangeEventArgs args)
	{
		switch (args.Value)
		{
			case "Small":
				PaintingX = 30;
				PaintingY = 50;
				Price = "Price: $50.00";
				break;
			case "Medium":
				PaintingX = 50;
				PaintingY = 80;
				Price = "Price: $75.00";
				break;
			case "LandScape":
				PaintingX = 80;
				PaintingY = 50;
				Price = "Price: $99.00";
				break;

			default:
				PaintingX = 30;
				PaintingY = 50;
				Price = "Price: $99.00";
				break;

		}
		await ExportModel();

	}


	private async Task ExportModel()
	{
		try
		{
			string blobUrl = await jsRunTime.InvokeAsync<string>("getglb", UrlToImage, PaintingX, PaintingY);
			glbModelData = blobUrl;
			StateHasChanged();
		}
		catch (Exception ex)
		{
			// Handle any errors here
			Console.WriteLine(ex.Message);
		}
	}


	protected override async Task OnInitializedAsync()
	{

	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await ExportModel();


		}
	}

}
