@page "/WhackMe"
@using Portfolio.Pages.WhackMe.Game;
@using Portfolio.Pages.WhackMe.Game.Components
@using Portfolio.Pages.WhackMe.Game.Models;
@using Portfolio.Pages.WhackMe.Game.Services;
@inject NavigationManager nav
@inject WhackMeHighScoreSerice hsService

<div class="main container-fluid">

	<div class="row text-center">
		<div class="col-12 justify-content-center" style="margin-top: 50px;">
			<h1>Smack me in the Head</h1>

		</div>
	</div>



	<div class="info-container">
		<h2>Score: @Game.Score @if (!Game.IsGameRunning && Game.Score > 0)
			{
				  <a class="score" data-fancybox data-src="#mh"> Sumbit Score</a>
			}</h2>
		<h2>Time remaining: @Game.CurrentTime</h2>
		<h2>@Game.Message</h2>
	</div>

	<div class="row">

		<div class="col-6">
			<div class="highscore">

				<div class="container">


				@foreach (var item in Highscore)
				{
					
					<div class="row">
					<p>@item.Name  @item.Score points</p>
					</div>
				}

				</div>

			</div>
		</div>

		<div class="col-6">

			<div class="board">

				@foreach (var square in Game.Squares)
				{
					<Square SquareModel="square" OnMouseUp="() => MouseUp(square)" />
				}

			</div>
		</div>


	</div>
		<div class="row">
			<div class="col-12">
			<button class="rs" @onclick="Restart">Restart</button>

			</div>
		</div>









		<div class="mh-portfolio-modal" id="mh">
			<div class="container">
				<div class="row mh-portfolio-modal-inner">
					<div class="col-sm-12 text-center">
					<h2>Thank you for playing my silly game!</h2>
						<p>
							You got @Game.Score points!
						</p>

						<input  placeholder="Name" @bind-value="@Score.Name" class="form-control text-white"/>

					<a @onclick="AddScore" class="btn btn-fill text-white">Submit Score </a>
					</div>

				</div>
			</div>
		</div>
	








</div>


@code {

	private GameInfo Game = new GameInfo();
	PeriodicTimer GameLoopTimer;
	PeriodicTimer GameTimeTimer;

	private List<Highscore> Highscore = new();
	private Highscore Score = new();

	private async Task AddScore()
	{
		Score.Score = Game.Score;
		await hsService.AddHighScore(Score);
		nav.NavigateTo("WhackMe", true);
	}

	private void MouseUp(SquareModel square)
	{
		if (Game.IsGameRunning)
		{
			if (square.Id == Game.HitPosition)
			{
				Game.Score++;

			}
		}
	}

	private Random random = new Random();
	int? LastPosition = null;

	private void SetNextAppearance()
	{
		foreach (var item in Game.Squares)
		{
			item.IsShown = false;
		}

		int randomPos;

		do
		{
			randomPos = random.Next(0, 9);
		} while (LastPosition == randomPos);

		Game.Squares[randomPos].IsShown = true;
		Game.HitPosition = randomPos;
		LastPosition = randomPos;

		StateHasChanged();

	}


	private async Task GameLoopAsync(PeriodicTimer timer)
	{
		while (Game.IsGameRunning)
		{
			SetNextAppearance();
			await timer.WaitForNextTickAsync();
		}
	}

	private async Task GaneTimeAsync(PeriodicTimer timer)
	{
		while (Game.IsGameRunning)
		{
			Game.CurrentTime--;
			if (Game.CurrentTime == 0)
			{
				
				Game.Message = "Time is up!";
				Game.IsGameRunning = false;

			}
			StateHasChanged();

			await timer.WaitForNextTickAsync();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		

		Highscore = await hsService.GetHighScoresAsync();
		Highscore = Highscore.OrderByDescending(x => x.Score).Where(x => x.Score > 0).Take(10).ToList();

		GameLoopTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(Game.GameSpeed));

		_ = GameLoopAsync(GameLoopTimer);

		GameTimeTimer = new PeriodicTimer(TimeSpan.FromSeconds(1));

		_ = GaneTimeAsync(GameTimeTimer);

		StateHasChanged();

	}

	private void Restart()
	{
		nav.NavigateTo("WhackMe", true);
	}

}
